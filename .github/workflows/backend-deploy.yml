name: Deploy Backend API to Azure

on:
  push:
    branches: [ master ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install dependencies
      run: cd backend && npm ci

    - name: Build (if needed)
      run: |
        cd backend
        if [ -f package.json ] && grep -q '"build"' package.json; then npm run build; fi

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'limos-rental-api'
        slot-name: production
        package: backend

    - name: Configure App Settings
      uses: azure/CLI@v1
      with:
        inlineScript: |
          az webapp config appsettings set --name limos-rental-api --resource-group limos-rental-rg --settings \
          PORT="8080" \
          NODE_ENV="production" \
          CORS_ORIGIN="https://www.elitewaylimo.ch" \
          MY_POS_PRIVATE_KEY="${{ secrets.MY_POS_PRIVATE_KEY }}" \
          COMMUNICATION_CONNECTION_STRING="${{ secrets.COMMUNICATION_CONNECTION_STRING }}" \
          EMAIL_FROM="info@elitewaylimo.ch" \
          EMAIL_INFO="info@elitewaylimo.ch" \
          EMAIL_CONTACT="info@elitewaylimo.ch" \
          ADMIN_EMAIL="info@elitewaylimo.ch" \
          TENANT_ID="${{ secrets.TENANT_ID }}" \
          CLIENT_ID="${{ secrets.CLIENT_ID }}" \
          CLIENT_SECRET="${{ secrets.CLIENT_SECRET }}" \
          WEBSITE_NODE_DEFAULT_VERSION="~18" \
          FRONTEND_URL="https://www.elitewaylimo.ch"

    - name: Wait for app to start
      run: |
        echo "Waiting for service to start..."
        sleep 45
        max_retries=5
        retry_count=0
        
        while [ $retry_count -lt $max_retries ]; do
          response=$(curl -s -o /dev/null -w "%{http_code}" https://limos-rental-api.azurewebsites.net/health)
          if [ "$response" = "200" ]; then
            echo "Service is healthy"
            exit 0
          fi
          echo "Health check failed with status $response, retrying in 30 seconds..."
          sleep 30
          retry_count=$((retry_count+1))
        done
        
        echo "Health check failed after $max_retries attempts"
        exit 1